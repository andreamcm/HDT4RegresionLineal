setwd("~/2019/UVG/Primer Semestre/Minería de Datos/Laboratorios/Laboratorio4/HDT4RegresionLineal/Datos")
# Se cargan todos los datos
read.csv("train2.csv")
# Se cargan todos los datos
data <- read.csv("train2.csv")
#-----------------------------------------------------------------------------------------------------------------------------------------------
# Librerias a utilizar
library(caret)
# Se cargan todos los datos
datos <- read.csv("train2.csv")
datos$y <- as.numeric(datos$AdoptionSpeed)
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- as.numeric(datos$AdoptionSpeed)
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- as.numeric(datos$AdoptionSpeed)
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
?lm
fitLMPW <- lm(datos$AdoptionSpeed~datos$Age, data = train)
fitLMPW
prediccionRL <- predict(fitLMPW, newdata = test)
restultados <- data.frame(test$AdoptionSpeed.prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed~resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.datos$AdopdionSpeed~resultados$prediccionRL)
str(datos)
restultados
fitLMPW
prediccionRL
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
prediccionRL
restultados <- data.frame(test.prediccionRL)
restultados <- data.frame(test.prediccionRL)
restultados <- data.frame(test$prediccionRL)
restultados
restultados <- data.frame(test$AdoptionSpeed, prediccionRL)
restultados
resultados$variacion <- abs(resultados$test.AdopdionSpeed~resultados$prediccionRL)
restultados$test.AdoptionSpeed
resultados$prediccionRL
resultados$variacion <- abs(restultados$test.AdopdionSpeed~restultados$prediccionRL)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
resultados$variacion <- abs(restultados$test.AdopdionSpeed~restultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed~resultados$prediccionRL)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$prediccionRL
resultados$variacion <- abs(resultados$test.AdopdionSpeed~resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
datos$y <- as.numeric(datos$AdoptionSpeed)
datos$y
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- as.numeric(datos$AdoptionSpeed)
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
prediccionRL
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
?abs
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed,resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL+1)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL, replace(TRUE))
resultados <- data.frame(test$AdoptionSpeed, prediccionRL, replace=TRUE)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$variacio <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados[, variacion]<-abs(resultados$test.Petal.Length-resultados$predL)
resultados[, newvar]<-abs(resultados$test.Petal.Length-resultados$predL)
resultados[,variacion]<-abs(resultados$test.Petal.Length-resultados$predL)
datos$y <- datos$AdoptionSpeed
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- datos$AdoptionSpeed
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
prediccionRL
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resta <- resultados$test.AdopdionSpeed-resultados$prediccionRL
resta
resultados[,variacion] <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
#Modelo de Regresión lineal
porcentaje<-0.7
datos<-iris
set.seed(123)
datos$y<- as.numeric(datos$Species)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
#-------------------------------------------------
# Regresión Lineal Simple
#-------------------------------------------------
fitLMPW<-lm(Petal.Length~Petal.Width, data = train)
#Estimar el lenght del pétalo a partir de su width
#-------
predL<-predict(fitLMPW, newdata = test)
#Verificando la predicción
resultados<-data.frame(test$Petal.Length,predL)
resultados$variacion<-abs(resultados$test.Petal.Length-resultados$predL)
resultados
resultados$test.Petal.Length
resultados$
resultados$variacion<-abs(resultados$test.Petal.Length-resultados$predL)
resultados$predL
resta <- resultados$test.Petal.Length-resultados$predL
resta
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- datos$AdoptionSpeed
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
# Set del working directory de Andrea
setwd("~/2019/UVG/Primer Semestre/Minería de Datos/Laboratorios/Laboratorio4/HDT4RegresionLineal/Datos")
# Se cargan todos los datos
datos <- read.csv("train2.csv")
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- datos$AdoptionSpeed
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$test.AdoptionSpeed
resultados$prediccionRL
resultados$variacion <- abs(resultados$test.AdopdionSpeed-resultados$prediccionRL)
resultados$variacion <- abs(resultados$prediccionRL-resultados$test.AdoptionSpeed)
resultados$
fitLMPW<-lm(Petal.Length~Petal.Width, data = train)
resultados$variacion
fitLMSpBPL<- lm(y~test$AdoptionSpeed, data = train)
fitLMSpBPL<- lm(y~AdoptionSpeed, data = train)
summary(fitLMSpBPL)
resultados1 <- data.frame(test$y, round(prediccionMSpByPL, 0))
names(resultados1) <- c("real", "prediccion")
confusionMatrix(resultados1$real, resultados1$prediccion)
prediccionMSpByPL <- predict(fitLMSpBPL, newdata = test)
resultados1 <- data.frame(test$y, round(prediccionMSpByPL, 0))
names(resultados1) <- c("real", "prediccion")
confusionMatrix(resultados1$real, resultados1$prediccion)
resultados1$real
resultados1$prediccion
confusionMatrix(resultados1$real, resultados1$prediccion)
confusionMatrix(table(resultados1$real, resultados1$prediccion))
porcentaje <- 0.7 # Se define el porcentaje de los datos de entrenamiento
set.seed(123) # Para que no se repita la seleccion de datos cada vez que se corra el programa
datos$y <- datos$AdoptionSpeed
corte <- sample(nrow(datos), nrow(datos)*porcentaje)
train <- datos[corte, ]
test <- datos[-corte, ]
fitLMPW <- lm(AdoptionSpeed~Age, data = train)
prediccionRL <- predict(fitLMPW, newdata = test)
resultados <- data.frame(test$AdoptionSpeed, prediccionRL)
resultados$variacion <- abs(resultados$prediccionRL-resultados$test.AdoptionSpeed)
fitLMSpBPL<- lm(y~AdoptionSpeed, data = train)
summary(fitLMSpBPL)
prediccionMSpByPL <- predict(fitLMSpBPL, newdata = test)
resultados1 <- data.frame(test$y, round(prediccionMSpByPL, 0))
names(resultados1) <- c("real", "prediccion")
resultados1$real
resultados1$prediccion
confusionMatrix(table(resultados1$real, resultados1$prediccion))
